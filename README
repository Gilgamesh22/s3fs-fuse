Author Zaid Nackasha 

In order to compile s3fs with encryption you will need the following packages:
•	FUSE:         
•	Build-essential
•	Libfuse-dev
•	Libbcurl4-openssl-dev
•	Libxml2-dev
•	Mime-support

•	CryptoPP:
•	libcrypto++-utils
•	libcrypto++9
•	libcrypto++9-dbg
•	libcrypto++-dev
•	libcrypto++-doc

To download s3fs with encryption simply go to 
	https://github.com/Gilgamesh22/s3fs-fuse/archive/master.zip
	
After downloading simply unzip the file using the tar command
	tar -zxvf  s3fs-fuse-master.zip

After unzipping simply use the following commands
	sudo ./configure --prefix=/usr
	sudo make
	sudo make install
 
before mounting you need to configure the /etc/.passwd-s3fs file. This file contains you accessKey and secretAccessKey to access your bucket. The file needs to be in the following format
	accessKey: secretAccessKey
	
Finally before running s3fs you need to change the permissions of the file to be able to read and write.
	sudo chmod 640 /etc/passwd-s3fs
	
To run simply use the following command. Please note replace mybucket with you actual bucket name. Also replace key with you actual encryption key. also note the key needs to be 16 characters long.
	sudo /usr/bin/s3fs mybucket /mnt -o allow_other –k Key


Downloading & Compiling:
------------------------
In order to download s3fs, download from following url:
https://github.com/s3fs-fuse/s3fs-fuse/archive/master.zip
Or clone the following command:
git clone git://github.com/s3fs-fuse/s3fs-fuse.git

Go inside the directory that has been created (s3fs-fuse) and run: ./autogen.sh
This will generate a number of scripts in the project directory, including a configure script which you should run with: ./configure
If configure succeeded, you can now run: make. If it didn't, make sure you meet the dependencies above.
This should compile the code. If everything goes OK, you'll be greeted with "ok!" at the end and you'll have a binary file called "s3fs"
in the src/ directory.

As root (you can use su, su -, sudo) do: "make install" -this will copy the "s3fs" binary to /usr/local/bin.

Congratulations. S3fs is now compiled and installed.

Usage:
------
In order to use s3fs, make sure you have the Access Key and the Secret Key handy. (refer to the wiki)
First, create a directory where to mount the S3 bucket you want to use.
Example (as root): mkdir -p /mnt/s3
Then run: s3fs mybucket[:path] /mnt/s3

This will mount your bucket to /mnt/s3. You can do a simple "ls -l /mnt/s3" to see the content of your bucket.

If you want to allow other people access the same bucket in the same machine, you can add "-o allow_other" to read/write/delete content of the bucket.

You can add a fixed mount point in /etc/fstab, here's an example:

s3fs#mybucket /mnt/s3 fuse allow_other 0 0

This will mount upon reboot (or by launching: mount -a) your bucket on your machine.
If that does not work, probably you should specify with "_netdev" option in fstab.

All other options can be read at: https://github.com/s3fs-fuse/s3fs-fuse/wiki/Fuse-Over-Amazon

Known Issues:
-------------
s3fs should be working fine with S3 storage. However, There are couple of limitations:

* Currently s3fs could hang the CPU if you have lots of time-outs. This is *NOT* a fault of s3fs but rather libcurl. This happens when you try to copy thousands of files in 1 session, it doesn't happen when you upload hundreds of files or less.
* CentOS 4.x/RHEL 4.x users - if you use the kernel that shipped with your distribution and didn't upgrade to the latest kernel RedHat/CentOS gives, you might have a problem loading the "fuse" kernel. Please upgrade to the latest kernel (2.6.16 or above) and make sure "fuse" kernel module is compiled and loadable since FUSE requires this kernel module and s3fs requires it as well.
* Moving/renaming/erasing files takes time since the whole file needs to be accessed first. A workaround could be to use s3fs's cache support with the use_cache option.

